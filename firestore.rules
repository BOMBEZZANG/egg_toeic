  rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Helper functions for security
        function isAuthenticated() {
          return request.auth != null;
        }

        function isAdmin() {
          return isAuthenticated() &&
                 request.auth.token.email != null &&
                 request.auth.token.email_verified == true;
        }

        function isValidMetadata(data) {
          return data.keys().hasAll(['lastUpdated', 'createdAt', 'version']) &&
                 data.lastUpdated is timestamp &&
                 data.createdAt is timestamp &&
                 data.version is string;
        }

        function isValidQuestionData(data) {
          return data.keys().hasAll([
                   'questionText', 'options', 'correctAnswerIndex',
                   'difficultyLevel', 'questionType', 'explanation', 'tags'
                 ]) &&
                 data.options is list &&
                 data.options.size() == 4 &&
                 data.correctAnswerIndex is number &&
                 data.correctAnswerIndex >= 0 &&
                 data.correctAnswerIndex <= 3 &&
                 data.difficultyLevel in [1, 2, 3] &&
                 data.questionType in ['grammar', 'vocabulary'] &&
                 data.tags is list &&
                 data.tags.size() > 0;
        }

        function isValidUserAnswer(data) {
          return data.keys().hasAll([
                   'userId', 'questionId', 'selectedAnswerIndex',
                   'correctAnswerIndex', 'isCorrect', 'questionMode',
                   'questionType', 'difficultyLevel', 'grammarPoint'
                 ]) &&
                 data.userId is string &&
                 data.questionId is string &&
                 data.selectedAnswerIndex is number &&
                 data.selectedAnswerIndex >= 0 &&
                 data.selectedAnswerIndex <= 3 &&
                 data.correctAnswerIndex is number &&
                 data.correctAnswerIndex >= 0 &&
                 data.correctAnswerIndex <= 3 &&
                 data.isCorrect is bool &&
                 data.questionMode in ['practice', 'exam'] &&
                 data.questionType in ['grammar', 'vocabulary'] &&
                 data.difficultyLevel in [1, 2, 3] &&
                 data.grammarPoint is string;
        }

        // Helper function to validate anonymous user ID format
        function isValidAnonymousUserId(userId) {
          return userId is string &&
                 userId.matches('anon_[0-9]+_[0-9]+');
        }

        // Exam Questions Collection (allow public read for Flutter app)
        match /examQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidQuestionData(resource.data) &&
                          resource.data.mode == 'exam';
        }

        // Practice Questions Collection (allow public read for Flutter app)
        match /practiceQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidQuestionData(resource.data) &&
                          resource.data.mode == 'practice';
        }

        // Part 6 Exam Questions Collection (allow public read for Flutter app)
        match /part6examQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin();
        }

        // Part 6 Practice Questions Collection (allow public read for Flutter app)
        match /part6practiceQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin();
        }

        // Part 2 Exam Questions Collection (allow public read for Flutter app)
        match /part2examQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin();
        }

        // Part 2 Practice Questions Collection (allow public read for Flutter app)
        match /part2practiceQuestions/{questionId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin();
        }

        // Exam Sets Collection
        match /examSets/{setId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // Daily Sets Collection
        match /dailySets/{setId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // METADATA COLLECTIONS

        // Practice Metadata - Summary (allow public read for Flutter app)
        match /metadata/practice {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() && isValidMetadata(resource.data);
        }

        // Practice Metadata - Daily dates (corrected path structure)
        match /metadata/practice/daily/{date} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidMetadata(resource.data) &&
                          resource.data.keys().hasAll([
                            'date', 'totalQuestions', 'questionIds',
                            'levelDistribution', 'preview'
                          ]) &&
                          resource.data.date is string &&
                          resource.data.totalQuestions is number &&
                          resource.data.questionIds is list &&
                          resource.data.levelDistribution is map &&
                          resource.data.preview is map;
        }

        // Exam Metadata - Summary (allow public read for Flutter app)
        match /metadata/exam {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() && isValidMetadata(resource.data);
        }

        // Exam Metadata - Rounds (allow public read for Flutter app)
        match /metadata/exam/rounds/{roundId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidMetadata(resource.data) &&
                          resource.data.keys().hasAll([
                            'roundId', 'roundNumber', 'totalQuestions',
                            'sections', 'questionIds', 'examInfo'
                          ]) &&
                          resource.data.roundId is string &&
                          resource.data.roundNumber is number &&
                          resource.data.totalQuestions is number &&
                          resource.data.sections is map &&
                          resource.data.questionIds is list &&
                          resource.data.examInfo is map;
        }

        // Part6 Practice Metadata - Summary (allow public read for Flutter app)
        match /metadata/part6_practice {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() && isValidMetadata(resource.data);
        }

        // Part6 Practice Metadata - Daily dates (allow public read for Flutter app)
        match /metadata/part6_practice/daily/{date} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidMetadata(resource.data) &&
                          resource.data.keys().hasAll([
                            'date', 'totalQuestions', 'questionIds'
                          ]) &&
                          resource.data.date is string &&
                          resource.data.totalQuestions is number &&
                          resource.data.questionIds is list;
        }

        // Part2 Exam Metadata - Summary (allow public read for Flutter app)
        match /metadata/part2_exam {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() && isValidMetadata(resource.data);
        }

        // Part2 Exam Metadata - Rounds (allow public read for Flutter app)
        match /metadata/part2_exam/rounds/{roundId} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidMetadata(resource.data) &&
                          resource.data.keys().hasAll([
                            'testNumber', 'roundId', 'totalQuestions', 'questionIds'
                          ]) &&
                          resource.data.testNumber is number &&
                          resource.data.roundId is string &&
                          resource.data.totalQuestions is number &&
                          resource.data.questionIds is list;
        }

        // Part2 Practice Metadata - Summary (allow public read for Flutter app)
        match /metadata/part2_practice {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() && isValidMetadata(resource.data);
        }

        // Part2 Practice Metadata - Daily dates (allow public read for Flutter app)
        match /metadata/part2_practice/daily/{date} {
          allow read: if true; // Allow public read for Flutter app
          allow write: if isAdmin() &&
                          isValidMetadata(resource.data) &&
                          resource.data.keys().hasAll([
                            'date', 'totalQuestions', 'questionIds'
                          ]) &&
                          resource.data.date is string &&
                          resource.data.totalQuestions is number &&
                          resource.data.questionIds is list;
        }

        // Batch Operations Metadata
        match /metadata/batchOperations/{batchId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin() &&
                          resource.data.keys().hasAll([
                            'id', 'type', 'status', 'totalItems',
                            'processedItems', 'failedItems', 'errors',
                            'startedAt', 'metadata'
                          ]) &&
                          resource.data.type in ['practice', 'exam'] &&
                          resource.data.status in ['pending', 'processing', 'completed', 'failed', 'partial'];
        }

        // Analytics Cache Metadata
        match /metadata/analytics/{docId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // Question History Collection
        match /questionHistory/{historyId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // Review Comments Collection
        match /reviewComments/{commentId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // Tags Collection
        match /tags/{tagId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin() &&
                          resource.data.keys().hasAll(['name', 'category', 'usageCount']) &&
                          resource.data.category in ['grammar', 'topic', 'difficulty', 'custom'];
        }

        // Admin Logs Collection
        match /adminLogs/{logId} {
          allow read: if isAdmin();
          allow create: if isAdmin();
          allow update, delete: if false; // Logs are immutable
        }

        // User specific data - UPDATED for anonymous users
        match /users/{userId} {
          // Allow read/write for authenticated users or anonymous users with valid ID format
          allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin()) ||
                         isValidAnonymousUserId(userId);
          allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin()) ||
                          isValidAnonymousUserId(userId);

          // Subcollections - allow authenticated users AND anonymous access
          match /wrongAnswers/{wrongAnswerId} {
            allow read, write: if (isAuthenticated() && request.auth.uid == userId) ||
                                  isValidAnonymousUserId(userId);
          }

          match /learningSessions/{sessionId} {
            allow read, write: if (isAuthenticated() && request.auth.uid == userId) ||
                                  isValidAnonymousUserId(userId);
          }

          match /examResults/{resultId} {
            allow read, write: if (isAuthenticated() && request.auth.uid == userId) ||
                                  isValidAnonymousUserId(userId);
          }

          match /bookmarks/{bookmarkId} {
            allow read, write: if (isAuthenticated() && request.auth.uid == userId) ||
                                  isValidAnonymousUserId(userId);
          }

          match /examProgress/{progressId} {
            allow read, write: if (isAuthenticated() && request.auth.uid == userId) ||
                                  isValidAnonymousUserId(userId);
          }
        }

        // Settings collection (admin only)
        match /settings/{settingId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // Performance metrics (admin only write, auth read)
        match /metrics/{metricId} {
          allow read: if isAuthenticated();
          allow write: if isAdmin();
        }

        // User Answers Collection - UPDATED for anonymous analytics
        match /userAnswers/{answerId} {
          allow read: if true; // Allow public read for analytics
          allow create: if (isAuthenticated() && request.auth.uid == request.resource.data.userId) ||
                           (isValidAnonymousUserId(request.resource.data.userId) && isValidUserAnswer(request.resource.data));
          allow update, delete: if isAdmin(); // Only admin can modify/delete answers
        }

        // Question Analytics Collection - UPDATED for anonymous analytics
        match /questionAnalytics/{questionId} {
          allow read: if true; // Allow public read for Flutter app to show statistics
          allow write: if true; // Allow anonymous writes for analytics updates
          allow delete: if isAdmin(); // Only admin can delete analytics
        }

        // Default deny all other documents
        match /{document=**} {
          allow read, write: if false;
        }
      }
    }
